<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Cyber Security Minesweeper</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Orbitron', sans-serif;
      text-align: center;
      background: linear-gradient(135deg, #0f0f0f 0%, #1a1a2e 100%);
      margin: 0;
      padding: 20px;
      color: #00fffc;
      min-height: 100vh;
    }

    h1 {
      margin: 20px 0 10px;
      color: #00fffc;
      text-shadow: 0 0 10px rgba(0, 255, 252, 0.5);
      font-weight: 700;
      letter-spacing: 2px;
    }

    #hearts {
      font-size: 28px;
      margin-bottom: 10px;
      text-shadow: 0 0 5px rgba(255, 0, 0, 0.7);
    }

    #mode-toggle {
      margin: 10px;
      padding: 8px 20px;
      font-size: 16px;
      border: none;
      background: linear-gradient(135deg, #00fffc 0%, #0082ff 100%);
      color: #000;
      border-radius: 5px;
      cursor: pointer;
      font-family: 'Orbitron', sans-serif;
      font-weight: 500;
      letter-spacing: 1px;
      box-shadow: 0 0 10px rgba(0, 255, 252, 0.3);
      transition: all 0.3s ease;
    }

    #mode-toggle:hover {
      box-shadow: 0 0 15px rgba(0, 255, 252, 0.5);
      transform: translateY(-2px);
    }

    #mode-toggle.flag-mode {
      background: linear-gradient(135deg, #ff3c00 0%, #ff0062 100%);
      color: white;
    }

    #game-board {
      display: grid;
      grid-template-columns: repeat(14, 50px);
      grid-template-rows: repeat(14, 50px);
      gap: 2px;
      justify-content: center;
      margin: 10px auto;
    }

    .cell {
      width: 50px;
      height: 50px;
      background: linear-gradient(135deg, #1e1e2e 0%, #2d2d42 100%);
      border: 1px solid #00fffc;
      font-size: 16px;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      user-select: none;
      position: relative;
      color: #00fffc;
      box-shadow: 0 0 5px rgba(0, 255, 252, 0.2);
      transition: all 0.2s ease;
    }

    .cell:hover {
      box-shadow: 0 0 10px rgba(0, 255, 252, 0.5);
      transform: scale(1.05);
    }

    .revealed {
      background: linear-gradient(135deg, #0a0a12 0%, #1a1a2e 100%);
      cursor: default;
      border: 1px solid #333;
    }

    .info {
      display: none;
      position: absolute;
      bottom: 55px;
      left: 0;
      width: 200px;
      background: linear-gradient(135deg, #1a1a2e 0%, #0f0f1a 100%);
      border: 1px solid #00fffc;
      border-radius: 5px;
      padding: 10px;
      font-size: 12px;
      box-shadow: 0 0 15px rgba(0, 255, 252, 0.5);
      z-index: 10;
      color: #fff;
    }
    
    .info img {
      max-width: 100%;
      height: auto;
      margin-bottom: 5px;
      border-radius: 3px;
    }

    .flagged {
      font-size: 18px;
    }

    .mine {
      background: linear-gradient(135deg, #ff0000 0%, #990000 100%);
      animation: explode 0.4s ease-in-out;
      box-shadow: 0 0 15px rgba(255, 0, 0, 0.7);
    }

    @keyframes explode {
      0% { transform: scale(1); background: linear-gradient(135deg, #ff0000 0%, #990000 100%); }
      50% { transform: scale(1.3); background: linear-gradient(135deg, #ff3333 0%, #cc0000 100%); }
      100% { transform: scale(1); background: linear-gradient(135deg, #1e1e2e 0%, #2d2d42 100%); }
    }

    #ok-btn {
      background: linear-gradient(135deg, #00fffc 0%, #0082ff 100%);
      color: #000;
      display: none;
      margin: 20px auto;
      padding: 10px 30px;
      font-size: 18px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-family: 'Orbitron', sans-serif;
      font-weight: 500;
      letter-spacing: 1px;
      box-shadow: 0 0 10px rgba(0, 255, 252, 0.3);
      transition: all 0.3s ease;
    }

    #ok-btn:hover {
      box-shadow: 0 0 15px rgba(0, 255, 252, 0.5);
      transform: translateY(-2px);
    }

    #game-over {
      display: none;
      margin: 20px auto;
      padding: 30px;
      max-width: 500px;
      background: linear-gradient(135deg, #1a1a2e 0%, #0f0f1a 100%);
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0, 255, 252, 0.3);
      border: 1px solid #00fffc;
    }

    #game-over h2 {
      font-size: 32px;
      margin-bottom: 15px;
      color: #00fffc;
      text-shadow: 0 0 10px rgba(0, 255, 252, 0.5);
    }

    #score-display {
      font-size: 28px;
      font-weight: bold;
      margin: 20px 0;
      color: #00ff9d;
      text-shadow: 0 0 10px rgba(0, 255, 157, 0.5);
    }

    #game-over-buttons {
      margin-top: 30px;
    }
    
    .game-btn {
      margin: 10px;
      padding: 12px 25px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      color: #000;
      font-family: 'Orbitron', sans-serif;
      font-weight: 500;
      letter-spacing: 1px;
      box-shadow: 0 0 10px rgba(0, 255, 252, 0.3);
      transition: all 0.3s ease;
    }
    
    .game-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 0 15px rgba(0, 255, 252, 0.5);
    }
    
    #play-again-btn {
      background: linear-gradient(135deg, #00ff9d 0%, #00b37b 100%);
    }
    
    #games-btn {
      background: linear-gradient(135deg, #9b59b6 0%, #6a3093 100%);
    }
    
    #goback-btn {
      background: linear-gradient(135deg, #ff3c00 0%, #ff0062 100%);
    }
  </style>
</head>
<body>
  <h1>CYBER SECURITY MINESWEEPER</h1>
  <div id="hearts">❤️❤️❤️</div>
  <button id="mode-toggle">TOGGLE FLAG MODE</button>
  <div id="game-board"></div>
  
  <button id="ok-btn" class="game-btn">VIEW SCORES</button>

  <div id="game-over">
    <h2 id="game-result">GAME OVER</h2>
    <div id="score-display">SCORE: 0</div>
    <div id="game-over-buttons">
      <button class="game-btn" id="play-again-btn">PLAY AGAIN</button>
      <button class="game-btn" id="games-btn">GAMES</button>
      <button class="game-btn" id="goback-btn">GO BACK</button>
    </div>
  </div>

  <script>
    const boardSize = 14;
    const mineCount = 25;
    const mineTypes = [
      "brute", "adware", "clickbait", "key", "databreach", "trojan", "ddos", "dns",
      "malware", "pharming", "sql", "phishing", "ransomware", "rootkit", "spyware", "worm",
      "attack", "backdoor"
    ];
    const minesInfo = [
      {
        name: "brute",
        t: "BRUTE FORCE ATTACK",
        image: "images/brute.png",
        description: "An attack that tries every possible combination of passwords or encryption keys until the correct one is found.",
        link: '<a target="_blank" href="https://icons8.com/icon/AVn91KT7yJQk/brute-force-attack">Brute-Force Attack</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },
      {
        name: "adware",
        t: "ADWARE",
        image: "images/adware.png",
        description: "Software that displays unwanted advertisements, often in the form of pop-ups or banners, usually bundled with free software.",
        link: '<a target="_blank" href="https://icons8.com/icon/y8y1Stcx8hEI/adware">Adware</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },
      {
        name: "clickbait",
        t: "CLICKBAIT",
        image: "images/clickbait.png",
        description: "Deceptive or misleading links designed to attract clicks and often redirect users to malicious websites or download malware.",
        link: '<a target="_blank" href="https://icons8.com/icon/dFabi6GBMyB3/clickbait">Clickbait</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },
      {
        name: "key",
        t: "KEYLOGGER",
        image: "images/key.png",
        description: "A type of malware that records every keystroke made on a device to capture sensitive data like passwords and credit card numbers",
        link: '<a target="_blank" href="https://icons8.com/icon/QfX8JVP3uQqb/cyber-attack">Cyber Attack</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "databreach",
        t: "DATA BREACH",
        image: "images/databreach.png",
        description: "A security incident where confidential, sensitive, or protected data is accessed or disclosed without authorization.",
        link: '<a target="_blank" href="https://icons8.comundefined">Data Breach</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "trojan",
        t: "TROJAN HORSE",
        image: "images/trojan.png",
        description: "Malicious software disguised as legitimate software that, once installed, gives attackers access to your system.",
        link: '<a target="_blank" href="https://icons8.com/icon/64c0ZcjHegRv/trojan-horse">Trojan Horse</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "ddos",
        t: "DDOS",
        image: "images/ddos.png",
        description: "An attack where many compromised devices flood a target with traffic, overwhelming it and causing service disruption.",
        link: '<a target="_blank" href="https://icons8.com/icon/E5qbgJDcCpfL/ddos">Ddos</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "dns",
        t: "DNS SPOOFING",
        image: "images/dns.png",
        description: "An attack that corrupts the DNS records to redirect users to fake or malicious websites without their knowledge.",
        link: '<a target="_blank" href="https://icons8.com/icon/9ZzVwZUITz7O/dns">DNS</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "malware",
        t: "MALWARE",
        image: "images/malware.png",
        description: "A general term for malicious software including viruses, worms, trojans, and more, designed to damage, disrupt, or gain unauthorized access.",
        link: '<a target="_blank" href="https://icons8.com/icon/Uior7exhKpwr/malware">Malware</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "pharming",
        t: "PHARMING",
        image: "images/pharming.png",
        description: "Redirects users from legitimate websites to fraudulent ones, often by exploiting DNS vulnerabilities, to steal sensitive data. ",
        link: '<a target="_blank" href="https://icons8.com/icon/aD50fZyhVYbw/pharming">Pharming</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "sql",
        t: "SQL INJECTION",
        image: "images/sql.png",
        description: "A code injection technique that exploits a vulnerability in a website's database by inserting malicious SQL code into input fields.",
        link: '<a target="_blank" href="https://icons8.com/icon/13406/sql">SQL</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "phishing",
        t: "PHISHING",
        image: "images/phishing.png",
        description: "Fraudulent attempts (often via email) to trick people into revealing personal or financial information by pretending to be a trustworthy entity.",
        link: '<a target="_blank" href="https://icons8.com/icon/ppntcGKmggBb/phishing">Phishing</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "ransomware",
        t: "RANSOMWARE",
        image: "images/ransomware.png",
        description: "A type of malware that encrypts a user's data and demands payment (a ransom) to restore access.",
        link: '<a target="_blank" href="https://icons8.com/icon/jZ91zjMzljBA/ransomware">Ransomware</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "rootkit",
        t: "ROOTKIT",
        image: "images/rootkit.png",
        description: "Malicious software that hides itself and other malware from detection while granting attackers root or administrative access to a system.",
        link: '<a target="_blank" href="https://icons8.com/icon/YrZOSD9FpOno/rootkit">Rootkit</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "spyware",
        t: "SPYWARE",
        image: "images/spyware.png",
        description: "Software that secretly collects information about a user's activities and sends it to a third party without consent.",
        link: '<a target="_blank" href="https://icons8.com/icon/beLjeUKjyedK/spyware">Spyware</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "worm",
        t: "WORM",
        image: "images/worm.png",
        description: "A standalone malware that replicates itself to spread to other computers, often exploiting network vulnerabilities.",
        link: '<a target="_blank" href="https://icons8.com/icon/PyGTfgzdUczD/worms">Worms</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "attack",
        t: "EAVESDROPPING ATTACK",
        image: "images/attack.png",
        description: "Intercepting and listening to private communication or data transmissions without authorization, often over unsecured networks.",
        link: '<a target="_blank" href="https://icons8.com/icon/Ypdp32kQebCf/hacker">Hacker</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      },{
        name: "backdoor",
        t: "BACKDOOR",
        image: "images/backdoor.png",
        description: "A hidden method of bypassing normal authentication to gain unauthorized access to a system, often left by malware or even developers.",
        link: '<a target="_blank" href="https://icons8.com/icon/7msJIrmR4mOD/website">Website</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'
      }
    ];
    let board = [];
    let hearts = 3;
    let gameOver = false;
    let isFlagMode = false;

    const boardElement = document.getElementById("game-board");
    const modeToggle = document.getElementById("mode-toggle");
    const heartsDisplay = document.getElementById("hearts");
    const okBtn = document.getElementById("ok-btn");
    const gameOverScreen = document.getElementById("game-over");
    const gameResult = document.getElementById("game-result");
    const scoreDisplay = document.getElementById("score-display");
    const playAgainBtn = document.getElementById("play-again-btn");
    const gamesBtn = document.getElementById("games-btn");
    const gobackBtn = document.getElementById("goback-btn");

    function updateHearts() {
      heartsDisplay.innerHTML = "❤️".repeat(hearts) + "🖤".repeat(3 - hearts);
    }

    function showGameOverScreen(didWin) {
      gameOver = true;
      
      // Calculate score based on remaining hearts
      let score = 0;
      if (hearts === 0) score = 0;
      else if (hearts === 1) score = 10;
      else if (hearts === 2) score = 5;
      else if (hearts === 3) score = 15;
      
      // Show OK button
      okBtn.style.display = "block";
      
      // Store the score for when OK is clicked
      okBtn.onclick = function() {
        // Hide game elements
        boardElement.style.display = "none";
        modeToggle.style.display = "none";
        heartsDisplay.style.display = "none";
        okBtn.style.display = "none";
        
        // Show game over screen with score
        gameResult.textContent = didWin ? "YOU WIN!" : "GAME OVER";
        scoreDisplay.textContent = `SCORE: ${score}`;
        gameOverScreen.style.display = "block";
      };
    }

    function initBoard() {
      board = [];
      boardElement.innerHTML = "";
      gameOver = false;
      hearts = 3;
      updateHearts();
      isFlagMode = false;
      modeToggle.classList.remove("flag-mode");
      modeToggle.textContent = "TOGGLE FLAG MODE";
      
      // Show game elements
      boardElement.style.display = "grid";
      modeToggle.style.display = "inline-block";
      heartsDisplay.style.display = "block";
      
      // Hide other elements
      okBtn.style.display = "none";
      gameOverScreen.style.display = "none";

      for (let i = 0; i < boardSize; i++) {
        board[i] = [];
        for (let j = 0; j < boardSize; j++) {
          board[i][j] = { mine: false, mineType: null, revealed: false, flagged: false, element: null };
        }
      }

      // Place mines
      let placed = 0;
      while (placed < mineCount) {
        const x = Math.floor(Math.random() * boardSize);
        const y = Math.floor(Math.random() * boardSize);
        if (!board[x][y].mine) {
          board[x][y].mine = true;
          board[x][y].mineType = mineTypes[Math.floor(Math.random() * mineTypes.length)];
          placed++;
        }
      }

      // Create cells
      for (let x = 0; x < boardSize; x++) {
        for (let y = 0; y < boardSize; y++) {
          const cell = document.createElement("div");
          cell.classList.add("cell");
          boardElement.appendChild(cell);
          board[x][y].element = cell;

          cell.addEventListener("click", () => handleCellClick(x, y));
          cell.addEventListener("contextmenu", e => {
            e.preventDefault();
            toggleFlag(x, y);
          });
        }
      }
    }

    function toggleFlag(x, y) {
      const cell = board[x][y];
      if (cell.revealed || gameOver) return;
      cell.flagged = !cell.flagged;
      cell.element.innerHTML = cell.flagged ? `<img src="images/lock.png" alt="lock">` : "";
    }

    function handleCellClick(x, y) {
      const cell = board[x][y];
      
      if (gameOver && cell.mine) {
        // When game is over, clicking on mines shows their info
        const mineInfo = minesInfo.find(info => info.name === cell.mineType);
        if (mineInfo) {
          const existingInfo = cell.element.querySelector('.info');
          if (existingInfo) {
            existingInfo.style.display = existingInfo.style.display === 'block' ? 'none' : 'block';
          } else {
            cell.element.innerHTML = `
              <img src="images/${cell.mineType}.png" alt="${cell.mineType}">
              <div class="info" style="display: block;">
                <strong>${mineInfo.t}</strong><br>
                <img src="${mineInfo.image}" alt="${mineInfo.name}"><br>
                ${mineInfo.description}<hr>
                ${mineInfo.link}
              </div>
            `;
          }
        }
        return;
      }

      if (gameOver) return;

      // If cell is already revealed and has mines nearby, show info on click
      if (cell.revealed && countAdjacentMines(x, y) > 0) {
        const infoDiv = cell.element.querySelector('.info');
        if (infoDiv) {
          infoDiv.style.display = infoDiv.style.display === 'block' ? 'none' : 'block';
        }
        return;
      }

      if (isFlagMode) {
        toggleFlag(x, y);
        return;
      }

      if (cell.mine) {
        const mineInfo = minesInfo.find(info => info.name === cell.mineType);
        if (mineInfo) {
          cell.element.innerHTML = `
            <img src="images/${cell.mineType}.png" alt="${cell.mineType}">
            <div class="info">
              <strong>${mineInfo.t}</strong><br>
              <img src="${mineInfo.image}" alt="${mineInfo.name}"><br>
              ${mineInfo.description}<hr>
              ${mineInfo.link}
            </div>
          `;
        }

        cell.element.classList.add("mine");
        setTimeout(() => {
          cell.element.classList.remove("mine");
          cell.element.style.background = "linear-gradient(135deg, #1e1e2e 0%, #2d2d42 100%)";
          cell.revealed = true;
          cell.element.classList.add("revealed");
        }, 400);
        
        hearts--;
        updateHearts();

        if (hearts <= 0) {
          revealAllMines();
          showGameOverScreen(false);
        }
      } else {
        revealSafe(x, y);
        checkWinCondition();
      }
    }

    function checkWinCondition() {
      // Check if all non-mine cells are revealed
      let allRevealed = true;
      for (let x = 0; x < boardSize; x++) {
        for (let y = 0; y < boardSize; y++) {
          if (!board[x][y].mine && !board[x][y].revealed) {
            allRevealed = false;
            break;
          }
        }
        if (!allRevealed) break;
      }
      
      if (allRevealed) {
        revealAllMines();
        showGameOverScreen(true);
      }
    }

    function revealSafe(x, y) {
      const cell = board[x][y];
      if (cell.revealed || cell.flagged) return;

      cell.revealed = true;
      cell.element.classList.add("revealed");

      const mineCount = countAdjacentMines(x, y);
      if (mineCount > 0) {
        cell.element.textContent = mineCount;
        // Add different colors for different numbers
        if (mineCount === 1) cell.element.style.color = "#00fffc";
        else if (mineCount === 2) cell.element.style.color = "#00ff9d";
        else if (mineCount === 3) cell.element.style.color = "#ff3c00";
        else cell.element.style.color = "#ff0062";
      } else {
        for (let dx = -1; dx <= 1; dx++) {
          for (let dy = -1; dy <= 1; dy++) {
            const nx = x + dx;
            const ny = y + dy;
            if (nx >= 0 && nx < boardSize && ny >= 0 && ny < boardSize) {
              revealSafe(nx, ny);
            }
          }
        }
      }
    }

    function countAdjacentMines(x, y) {
      let count = 0;
      for (let dx = -1; dx <= 1; dx++) {
        for (let dy = -1; dy <= 1; dy++) {
          const nx = x + dx;
          const ny = y + dy;
          if (nx >= 0 && nx < boardSize && ny >= 0 && ny < boardSize) {
            if (board[nx][ny].mine) count++;
          }
        }
      }
      return count;
    }

    function revealAllMines() {
      for (let x = 0; x < boardSize; x++) {
        for (let y = 0; y < boardSize; y++) {
          const cell = board[x][y];
          if (cell.mine) {
            const mineInfo = minesInfo.find(info => info.name === cell.mineType);
            cell.element.innerHTML = `
              <img src="images/${cell.mineType}.png" alt="${cell.mineType}">
              <div class="info">
                <strong>${mineInfo.t}</strong><br>
                <img src="${mineInfo.image}" alt="${mineInfo.name}">
                <p>${mineInfo.description}</p><hr>
                ${mineInfo.link}

              </div>
            `;

            cell.element.classList.add("mine");
            setTimeout(() => {
              cell.element.classList.remove("mine");
              cell.element.style.background = "linear-gradient(135deg, #1e1e2e 0%, #2d2d42 100%)";
              cell.revealed = true;
              cell.element.classList.add("revealed");
            }, 400);
          } else if (!cell.mine && !cell.revealed) {
            cell.element.textContent = "";
            cell.element.style.background = "linear-gradient(135deg, #0a0a12 0%, #1a1a2e 100%)";
            cell.revealed = true;
            cell.element.classList.add("revealed");
          }
        }
      }
    }

    modeToggle.addEventListener("click", () => {
      isFlagMode = !isFlagMode;
      modeToggle.classList.toggle("flag-mode", isFlagMode);
      modeToggle.textContent = isFlagMode ? "FLAG MODE ON" : "TOGGLE FLAG MODE";
    });

    playAgainBtn.addEventListener("click", initBoard);
    gamesBtn.addEventListener("click", () => {
      window.location.href = "/levels";
    });
    gobackBtn.addEventListener("click", () => {
      window.location.href = "/";
    });

    initBoard();
  </script>
</body>
</html>